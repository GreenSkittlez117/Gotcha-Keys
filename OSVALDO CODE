// Starter Code
#include <Servo.h>

int pos = 0;  // Initial position for the servo
int lastButtonState = LOW;  // Stores the last button state
int buttonState = 0;  // Current button state

Servo servo_9;  // Servo object

const int buttonPin = 2;  // Button connected to pin 2
const int debounceDelay = 50;  // Debounce time in milliseconds

void setup() {
  pinMode(buttonPin, INPUT_PULLUP);  // Enable internal pull-up resistor
  servo_9.attach(9);  // Attach servo to pin 9
  servo_9.write(pos);  // Set initial position
}

void loop() {
  buttonState = digitalRead(buttonPin);  // Read button state

  // Detect button press (LOW because of INPUT_PULLUP)
  if (buttonState == LOW && lastButtonState == HIGH) {
    delay(debounceDelay);  // Debounce delay
    if (digitalRead(buttonPin) == LOW) {  // Ensure button is still pressed
      pos = (pos == 0) ? 90 : 0;  // Toggle between 0 and 90 degrees
      servo_9.write(pos);  // Move the servo
    }
  }

  lastButtonState = buttonState;  // Store button state for next loop iteration
}






Next Phase
/*
#include <SoftwareSerial.h>
#include <Servo.h>

SoftwareSerial mySerial(10, 11); // RX, TX
Servo myServo;  //servo on pin 9
int ledRed = 8;
int ledBlu = 7;
int dir;

void setup()  
{
  Serial.begin(9600);
  Serial.println("RFID Reader Start:");
  mySerial.begin(9600);
  pinMode(ledRed, OUTPUT);
  pinMode(ledBlu, OUTPUT);
  myServo.attach(9);
}

void loop() 
{
  myServo.write(1);
  digitalWrite(ledRed, HIGH);
  digitalWrite(ledBlu, LOW);
  if (mySerial.available())
  {
    Serial.write(mySerial.read());
    digitalWrite(ledRed, LOW);
    digitalWrite(ledBlu, HIGH);
    myServo.write(170);
  } 
  delay(500);
}
*/






// Next Phase
#include <MFRC522v2.h>
#include <MFRC522DriverSPI.h>
#include <MFRC522DriverPinSimple.h>
#include <MFRC522Debug.h>

#define ENABLE_SERIAL
#define SS_PIN 10
#define RST_PIN 9
#define SIGNAL_PIN 7 // To propagate information to firmata arduino High is Valid medal detected Low otherwise
#define REFRESH_DELAY 500

byte MedalID[4] = {0x13, 0x76, 0x8E, 0x31}; // The ID to check for the medal
bool cardRemoved = false;
int counter = 0;
bool current, previous;

MFRC522DriverPinSimple ss_pin(10);
MFRC522DriverSPI driver{ss_pin};
MFRC522 mfrc522{driver};

void setup()
{
#ifdef ENABLE_SERIAL
  // Init RS232
  Serial.begin(115200);
  Serial.println("Initialization");
#endif

  // Init SPI bus
  SPI.begin();

  // Init MFRC522
  mfrc522.PCD_Init();

  // Init signal gate
  pinMode(SIGNAL_PIN, OUTPUT);
  pinMode(A0, OUTPUT);
  digitalWrite(SIGNAL_PIN, LOW);
}

void loop()
{
  blinkLED();
  // Look for new cards
  if (!mfrc522.PICC_IsNewCardPresent())
  {
#ifdef ENABLE_SERIAL
    Serial.println("Skipping, no new card present.");
#endif
    return;
  }
  if (!mfrc522.PICC_ReadCardSerial())
  {
#ifdef ENABLE_SERIAL
    Serial.println("Skipping, unable to read card.");
#endif
    return;
  }

#ifdef ENABLE_SERIAL
  Serial.print("New RFID detected : ");
  PrintHex(mfrc522.uid.uidByte, mfrc522.uid.size);
  Serial.println("");
#endif

  digitalWrite(SIGNAL_PIN, VerifyRFID(MedalID, mfrc522.uid.uidByte) ? HIGH : LOW);

  // Check if Card was removed
  cardRemoved = false;
  counter = 0;

  previous = !mfrc522.PICC_IsNewCardPresent();

  while (!cardRemoved)
  {
    current = !mfrc522.PICC_IsNewCardPresent();

    if (current && previous)
      counter++;

    previous = current;
    cardRemoved = (counter > 2);
  }

#ifdef ENABLE_SERIAL
  Serial.println("RFID was removed");
#endif
  digitalWrite(SIGNAL_PIN, LOW);
  mfrc522.PICC_HaltA();
}

bool VerifyRFID(byte *RequiredID, byte *CheckedID)
{
  if ((RequiredID[0] == CheckedID[0]) && (RequiredID[1] == CheckedID[1]) && (RequiredID[2] == CheckedID[2]) && (RequiredID[3] == CheckedID[3]))
    return true;
  else
    return false;
}

#ifdef ENABLE_SERIAL
void PrintHex(uint8_t *data, uint8_t length) // prints 8-bit data in hex with leading zeroes
{
  char tmp[16];
  for (int i = 0; i < length; i++)
  {
    sprintf(tmp, "0x%.2X", data[i]);
    Serial.print(tmp);
    Serial.print(" ");
  }
}
#endif

const int ledPin = A0;            // The pin the LED is connected to
int ledState = LOW;               // Tracks the state of the LED
unsigned long previousMillis = 0; // Will store last time LED was updated
const long interval = 1000;       // Interval at which the LED should blink (milliseconds
void blinkLED()
{
  unsigned long currentMillis = millis(); // Get the current time

  if (currentMillis - previousMillis >= interval)
  {
    // Save the last time the LED blinked
    previousMillis = currentMillis;

    if (ledState == LOW)
    {
      ledState = HIGH; // If the LED is off, turn it on
    }
    else
    {
      ledState = LOW; // If the LED is on, turn it off
    }

    digitalWrite(ledPin, ledState); // Apply the LED state
  }
}

void runBreathalyzer() {
  // === Startup ===
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Breathalyzer ON");
  lcd.setCursor(0, 1);
  lcd.print("Warming up...");
  tone(buzzerPin, 650); delay(200); noTone(buzzerPin);
  delay(2000);  // 🔄 No change — optional: increase if needed

  // === Prompt User to Blow ===
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Blow into sensor");
  lcd.setCursor(0, 1);
  lcd.print("Keep blowing...");
  tone(buzzerPin, 750); delay(3000); noTone(buzzerPin);
  delay(1000); // 🆕 Added: Let the sensor stabilize after blowing

  // === Take Multiple Readings ===
  int sensorValue = 0;
  const int samples = 20; // 🆕 Added: number of analog samples to take
  for (int i = 0; i < samples; i++) {
    sensorValue += analogRead(sensorPin); // 🆕 Replaces single analogRead()
    delay(50); // 🆕 Delay between samples (total ~1 second)
  }
  sensorValue /= samples; // 🆕 Get the average of the samples

  // === Convert to BAC Estimate ===
  float bac = 0.0;
  if (sensorValue >= 350) { // ✅ Threshold preserved
    bac = ((sensorValue - 350) * 0.0002); // 🆕 Replaces integer-based map() with smoother float math
  }

  // === Display BAC ===
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("BAC: ");
  lcd.print(bac, 3); // ✅ No change — now prints better value due to float math
  delay(1500);

  // === Pass/Fail Logic ===
  if (bac >= 0.05) {
    // ❌ Fail condition
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("You're DRUNK!");
    lcd.setCursor(0, 1);
    lcd.print("Scan to Try Again");
    tone(buzzerPin, 600); delay(500); noTone(buzzerPin);
    Serial.println("Failed test. Box remains locked.");
    testReady = false;
    EEPROM.write(0, 1); // ✅ Preserved
    delay(3000);
    showScanMessage();
  } else {
    // ✅ Success condition
    unlockBox(); // ✅ Preserved
  }
}

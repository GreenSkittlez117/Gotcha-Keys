#include <LiquidCrystal.h>
#include <Servo.h>
#include <SPI.h>
#include <MFRC522.h>
#include <EEPROM.h>

// === Pin Configuration ===
#define RST_PIN 9
#define SS_PIN 10
const int buzzerPin = 3;
const int sensorPin = A0;
const int servoPin = 6;

// LCD: rs, en, d4, d5, d6, d7
LiquidCrystal lcd(A3, A1, 4, 5, A2, 7);
Servo lockServo;
MFRC522 rfid(SS_PIN, RST_PIN);

// === Authorized RFID Tag UID ===
byte authorizedUID[4] = { 0xB1, 0x25, 0xF9, 0x04 }; // Replace with your tag UID

// === State Flags ===
bool boxLocked = false;
bool testReady = false;

void setup() {
  Serial.begin(9600);
  SPI.begin();
  rfid.PCD_Init();

  pinMode(buzzerPin, OUTPUT);
  lockServo.attach(servoPin);
  lcd.begin(16, 2);

  // === Restore previous lock state from EEPROM
  byte lastState = EEPROM.read(0);

  if (lastState == 1) {
    // Box was locked due to failed test
    lockServo.write(90);
    boxLocked = true;
    testReady = false;

    lcd.setCursor(0, 0);
    lcd.print("LOCKED: Rebooted");
    lcd.setCursor(0, 1);
    lcd.print("Scan to test");
  } else {
    // Normal unlocked start
    lockServo.write(180);
    boxLocked = false;
    testReady = false;

    lcd.setCursor(0, 0);
    lcd.print("Scan RFID Tag");
    lcd.setCursor(0, 1);
    lcd.print("to Lock Box");
  }

  tone(buzzerPin, 600); delay(100); noTone(buzzerPin);
  delay(100);
  tone(buzzerPin, 700); delay(100); noTone(buzzerPin);
}

void loop() {
  if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) return;

  if (isAuthorizedTag()) {
    if (!boxLocked) {
      lockBox();
    } else if (!testReady) {
      startTestPrompt();
      runBreathalyzer();
    }
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Access Denied");
    lcd.setCursor(0, 1);
    lcd.print("Invalid RFID");
    tone(buzzerPin, 500); delay(200); noTone(buzzerPin);
    delay(2000);
    showScanMessage();
  }

  rfid.PICC_HaltA();           // Halt communication with tag
  rfid.PCD_StopCrypto1();      // Stop encryption on PCD side
  rfid.uid.size = 0;   
}

bool isAuthorizedTag() {
  for (byte i = 0; i < 4; i++) {
    if (rfid.uid.uidByte[i] != authorizedUID[i]) return false;
  }
  return true;
}

void lockBox() {
  lockServo.write(90); // Locked
  boxLocked = true;
  testReady = false;

  EEPROM.write(0, 1); // Save locked state

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Door Locked");
  lcd.setCursor(0, 1);
  lcd.print("Secured.");
  Serial.println("Box locked.");
  tone(buzzerPin, 600); delay(150); noTone(buzzerPin);
  delay(2000);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Scan RFID to");
  lcd.setCursor(0, 1);
  lcd.print("Begin Test");
}

void startTestPrompt() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("RFID Accepted");
  lcd.setCursor(0, 1);
  lcd.print("Starting Test...");
  Serial.println("Test starting...");
  tone(buzzerPin, 650); delay(200); noTone(buzzerPin);
  delay(2000);
  testReady = true;
}

void unlockBox() {
  lockServo.write(180); // Unlocked
  boxLocked = false;
  testReady = false;

  EEPROM.write(0, 0); // Save unlocked state

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("You Passed!");
  lcd.setCursor(0, 1);
  lcd.print("Keys: UNLOCKED");
  Serial.println("Box unlocked.");
  tone(buzzerPin, 700); delay(150); noTone(buzzerPin);
  delay(150);
  tone(buzzerPin, 800); delay(150); noTone(buzzerPin);
  delay(3000);
  showScanMessage();
}

void runBreathalyzer() {
  // === Startup ===
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Breathalyzer ON");
  lcd.setCursor(0, 1);
  lcd.print("Warming up...");
  tone(buzzerPin, 650); delay(200); noTone(buzzerPin);
  delay(2000);  // üîÑ No change ‚Äî optional: increase if needed

  // === Prompt User to Blow ===
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Blow into sensor");
  lcd.setCursor(0, 1);
  lcd.print("Keep blowing...");
  tone(buzzerPin, 750); delay(3000); noTone(buzzerPin);
  delay(1000); // üÜï Added: Let the sensor stabilize after blowing

  // === Take Multiple Readings ===
  int sensorValue = 0;
  const int samples = 20; // üÜï Added: number of analog samples to take
  for (int i = 0; i < samples; i++) {
    sensorValue += analogRead(sensorPin); // üÜï Replaces single analogRead()
    delay(50); // üÜï Delay between samples (total ~1 second)
  }
  sensorValue /= samples; // üÜï Get the average of the samples

  // === Convert to BAC Estimate ===
  float bac = 0.0;
  if (sensorValue >= 350) { // ‚úÖ Threshold preserved
    bac = ((sensorValue - 350) * 0.0002); // üÜï Replaces integer-based map() with smoother float math
  }

  // === Display BAC ===
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("BAC: ");
  lcd.print(bac, 3); // ‚úÖ No change ‚Äî now prints better value due to float math
  delay(1500);

  // === Pass/Fail Logic ===
  if (bac >= 0.04) {   // WILL BE CHANGED TO 0.08 AFTER EXPERIMENTS ARE CONDUCTED (Will only blow that high when a user actually blows into the sensor so they have to be drunk)
    // ‚ùå Fail condition
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("You're DRUNK!");
    lcd.setCursor(0, 1);
    lcd.print("Scan to Try Again");
    tone(buzzerPin, 600); delay(500); noTone(buzzerPin);
    Serial.println("Failed test. Box remains locked.");
    testReady = false;
    EEPROM.write(0, 1); // ‚úÖ Preserved
    delay(3000);
    showScanMessage();
  } else {
    // ‚úÖ Success condition
    unlockBox(); // ‚úÖ Preserved
  }
}

void showScanMessage() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Scan RFID Tag");
  if (!boxLocked) {
    lcd.setCursor(0, 1);
    lcd.print("to Lock Box");
  } else {
    lcd.setCursor(0, 1);
    lcd.print("to Begin Test");
  }
}
